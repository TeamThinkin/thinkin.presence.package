using Normal.Realtime;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class UserInfoModel
{
    [RealtimeProperty(1, true, true)]
    private string _displayName;

    [RealtimeProperty(2, true, true)]
    private string _avatarUrl;

    [RealtimeProperty(3, true)]
    private int _clientId;

    public UserInfoModel Clone()
    {
        var clone = new UserInfoModel();
        clone.displayName = this.displayName;
        clone.avatarUrl = this.avatarUrl;
        clone.clientId = this.clientId;
        return clone;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class UserInfoModel : RealtimeModel {
    public string displayName {
        get {
            return _displayNameProperty.value;
        }
        set {
            if (_displayNameProperty.value == value) return;
            _displayNameProperty.value = value;
            InvalidateReliableLength();
            FireDisplayNameDidChange(value);
        }
    }
    
    public string avatarUrl {
        get {
            return _avatarUrlProperty.value;
        }
        set {
            if (_avatarUrlProperty.value == value) return;
            _avatarUrlProperty.value = value;
            InvalidateReliableLength();
            FireAvatarUrlDidChange(value);
        }
    }
    
    public int clientId {
        get {
            return _clientIdProperty.value;
        }
        set {
            if (_clientIdProperty.value == value) return;
            _clientIdProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(UserInfoModel model, T value);
    public event PropertyChangedHandler<string> displayNameDidChange;
    public event PropertyChangedHandler<string> avatarUrlDidChange;
    
    public enum PropertyID : uint {
        DisplayName = 1,
        AvatarUrl = 2,
        ClientId = 3,
    }
    
    #region Properties
    
    private ReliableProperty<string> _displayNameProperty;
    
    private ReliableProperty<string> _avatarUrlProperty;
    
    private ReliableProperty<int> _clientIdProperty;
    
    #endregion
    
    public UserInfoModel() : base(null) {
        _displayNameProperty = new ReliableProperty<string>(1, _displayName);
        _avatarUrlProperty = new ReliableProperty<string>(2, _avatarUrl);
        _clientIdProperty = new ReliableProperty<int>(3, _clientId);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _displayNameProperty.UnsubscribeCallback();
        _avatarUrlProperty.UnsubscribeCallback();
        _clientIdProperty.UnsubscribeCallback();
    }
    
    private void FireDisplayNameDidChange(string value) {
        try {
            displayNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAvatarUrlDidChange(string value) {
        try {
            avatarUrlDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _displayNameProperty.WriteLength(context);
        length += _avatarUrlProperty.WriteLength(context);
        length += _clientIdProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _displayNameProperty.Write(stream, context);
        writes |= _avatarUrlProperty.Write(stream, context);
        writes |= _clientIdProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.DisplayName: {
                    changed = _displayNameProperty.Read(stream, context);
                    if (changed) FireDisplayNameDidChange(displayName);
                    break;
                }
                case (uint) PropertyID.AvatarUrl: {
                    changed = _avatarUrlProperty.Read(stream, context);
                    if (changed) FireAvatarUrlDidChange(avatarUrl);
                    break;
                }
                case (uint) PropertyID.ClientId: {
                    changed = _clientIdProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _displayName = displayName;
        _avatarUrl = avatarUrl;
        _clientId = clientId;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
