using Normal.Realtime.Serialization;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;

[RealtimeModel]
public partial class TelepresenceRoomManagerModel
{
    [RealtimeProperty(1, true)]
    private RealtimeSet<UserInfoModel> _connectedUsers;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class TelepresenceRoomManagerModel : RealtimeModel {
    public Normal.Realtime.Serialization.RealtimeSet<UserInfoModel> connectedUsers {
        get => _connectedUsers;
    }
    
    public enum PropertyID : uint {
        ConnectedUsers = 1,
    }
    
    #region Properties
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeSet<UserInfoModel>> _connectedUsersProperty;
    
    #endregion
    
    public TelepresenceRoomManagerModel() : base(null) {
        RealtimeModel[] childModels = new RealtimeModel[1];
        
        _connectedUsers = new Normal.Realtime.Serialization.RealtimeSet<UserInfoModel>();
        childModels[0] = _connectedUsers;
        
        SetChildren(childModels);
        
        _connectedUsersProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeSet<UserInfoModel>>(1, _connectedUsers);
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _connectedUsersProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _connectedUsersProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.ConnectedUsers: {
                    changed = _connectedUsersProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _connectedUsers = connectedUsers;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
