using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

public struct AvatarHandData
{
    public bool IsPointing;
    public float GripStrength;
    public float RayLength;

    public Quaternion FingerIndex1;
    public Quaternion FingerIndex2;
    public Quaternion FingerIndex3;

    public Quaternion FingerMiddle1;
    public Quaternion FingerMiddle2;
    public Quaternion FingerMiddle3;

    public Quaternion FingerRing1;
    public Quaternion FingerRing2;
    public Quaternion FingerRing3;

    public Quaternion FingerPinky1;
    public Quaternion FingerPinky2;
    public Quaternion FingerPinky3;

    public Quaternion FingerThumb1;
    public Quaternion FingerThumb2;
    public Quaternion FingerThumb3;

    public void CopyToHandInfoModel(HandInfoModel model)
    {
        model.isPointing = IsPointing;
        model.gripStrength = GripStrength;
        model.rayLength = RayLength;

        model.fingerIndex1 = FingerIndex1;
        model.fingerIndex2 = FingerIndex2;
        model.fingerIndex3 = FingerIndex3;

        model.fingerMiddle1 = FingerMiddle1;
        model.fingerMiddle2 = FingerMiddle2;
        model.fingerMiddle3 = FingerMiddle3;

        model.fingerRing1 = FingerRing1;
        model.fingerRing2 = FingerRing2;
        model.fingerRing3 = FingerRing3;

        model.fingerPinky1 = FingerPinky1;
        model.fingerPinky2 = FingerPinky2;
        model.fingerPinky3 = FingerPinky3;

        model.fingerThumb1 = FingerThumb1;
        model.fingerThumb2 = FingerThumb2;
        model.fingerThumb3 = FingerThumb3;
    }

    public void CopyFromHandInfoModel(HandInfoModel model)
    {
        IsPointing = model.isPointing;
        GripStrength = model.gripStrength;
        RayLength = model.rayLength;

        FingerIndex1 = model.fingerIndex1;
        FingerIndex2 = model.fingerIndex2;
        FingerIndex3 = model.fingerIndex3;

        FingerMiddle1 = model.fingerMiddle1;
        FingerMiddle2 = model.fingerMiddle2;
        FingerMiddle3 = model.fingerMiddle3;

        FingerRing1 = model.fingerRing1;
        FingerRing2 = model.fingerRing2;
        FingerRing3 = model.fingerRing3;

        FingerPinky1 = model.fingerPinky1;
        FingerPinky2 = model.fingerPinky2;
        FingerPinky3 = model.fingerPinky3;

        FingerThumb1 = model.fingerThumb1;
        FingerThumb2 = model.fingerThumb2;
        FingerThumb3 = model.fingerThumb3;
    }
}

[RealtimeModel]
public partial class HandInfoModel
{
    [RealtimeProperty(1, false)]
    private bool _isPointing;

    [RealtimeProperty(2, false)]
    private float _gripStrength;

    [RealtimeProperty(3, false)]
    private float _rayLength;

    [RealtimeProperty(4, false)]
    private Quaternion _fingerIndex1;
    [RealtimeProperty(5, false)]
    private Quaternion _fingerIndex2;
    [RealtimeProperty(6, false)]
    private Quaternion _fingerIndex3;

    [RealtimeProperty(7, false)]
    private Quaternion _fingerMiddle1;
    [RealtimeProperty(8, false)]
    private Quaternion _fingerMiddle2;
    [RealtimeProperty(9, false)]
    private Quaternion _fingerMiddle3;

    [RealtimeProperty(10, false)]
    private Quaternion _fingerRing1;
    [RealtimeProperty(11, false)]
    private Quaternion _fingerRing2;
    [RealtimeProperty(12, false)]
    private Quaternion _fingerRing3;

    [RealtimeProperty(13, false)]
    private Quaternion _fingerPinky1;
    [RealtimeProperty(14, false)]
    private Quaternion _fingerPinky2;
    [RealtimeProperty(15, false)]
    private Quaternion _fingerPinky3;

    [RealtimeProperty(16, false)]
    private Quaternion _fingerThumb1;
    [RealtimeProperty(17, false)]
    private Quaternion _fingerThumb2;
    [RealtimeProperty(18, false)]
    private Quaternion _fingerThumb3;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandInfoModel : RealtimeModel {
    public bool isPointing {
        get {
            return _isPointingProperty.value;
        }
        set {
            if (_isPointingProperty.value == value) return;
            _isPointingProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public float gripStrength {
        get {
            return _gripStrengthProperty.value;
        }
        set {
            if (_gripStrengthProperty.value == value) return;
            _gripStrengthProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public float rayLength {
        get {
            return _rayLengthProperty.value;
        }
        set {
            if (_rayLengthProperty.value == value) return;
            _rayLengthProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerIndex1 {
        get {
            return _fingerIndex1Property.value;
        }
        set {
            if (_fingerIndex1Property.value == value) return;
            _fingerIndex1Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerIndex2 {
        get {
            return _fingerIndex2Property.value;
        }
        set {
            if (_fingerIndex2Property.value == value) return;
            _fingerIndex2Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerIndex3 {
        get {
            return _fingerIndex3Property.value;
        }
        set {
            if (_fingerIndex3Property.value == value) return;
            _fingerIndex3Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerMiddle1 {
        get {
            return _fingerMiddle1Property.value;
        }
        set {
            if (_fingerMiddle1Property.value == value) return;
            _fingerMiddle1Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerMiddle2 {
        get {
            return _fingerMiddle2Property.value;
        }
        set {
            if (_fingerMiddle2Property.value == value) return;
            _fingerMiddle2Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerMiddle3 {
        get {
            return _fingerMiddle3Property.value;
        }
        set {
            if (_fingerMiddle3Property.value == value) return;
            _fingerMiddle3Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerRing1 {
        get {
            return _fingerRing1Property.value;
        }
        set {
            if (_fingerRing1Property.value == value) return;
            _fingerRing1Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerRing2 {
        get {
            return _fingerRing2Property.value;
        }
        set {
            if (_fingerRing2Property.value == value) return;
            _fingerRing2Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerRing3 {
        get {
            return _fingerRing3Property.value;
        }
        set {
            if (_fingerRing3Property.value == value) return;
            _fingerRing3Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerPinky1 {
        get {
            return _fingerPinky1Property.value;
        }
        set {
            if (_fingerPinky1Property.value == value) return;
            _fingerPinky1Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerPinky2 {
        get {
            return _fingerPinky2Property.value;
        }
        set {
            if (_fingerPinky2Property.value == value) return;
            _fingerPinky2Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerPinky3 {
        get {
            return _fingerPinky3Property.value;
        }
        set {
            if (_fingerPinky3Property.value == value) return;
            _fingerPinky3Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerThumb1 {
        get {
            return _fingerThumb1Property.value;
        }
        set {
            if (_fingerThumb1Property.value == value) return;
            _fingerThumb1Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerThumb2 {
        get {
            return _fingerThumb2Property.value;
        }
        set {
            if (_fingerThumb2Property.value == value) return;
            _fingerThumb2Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion fingerThumb3 {
        get {
            return _fingerThumb3Property.value;
        }
        set {
            if (_fingerThumb3Property.value == value) return;
            _fingerThumb3Property.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public enum PropertyID : uint {
        IsPointing = 1,
        GripStrength = 2,
        RayLength = 3,
        FingerIndex1 = 4,
        FingerIndex2 = 5,
        FingerIndex3 = 6,
        FingerMiddle1 = 7,
        FingerMiddle2 = 8,
        FingerMiddle3 = 9,
        FingerRing1 = 10,
        FingerRing2 = 11,
        FingerRing3 = 12,
        FingerPinky1 = 13,
        FingerPinky2 = 14,
        FingerPinky3 = 15,
        FingerThumb1 = 16,
        FingerThumb2 = 17,
        FingerThumb3 = 18,
    }
    
    #region Properties
    
    private UnreliableProperty<bool> _isPointingProperty;
    
    private UnreliableProperty<float> _gripStrengthProperty;
    
    private UnreliableProperty<float> _rayLengthProperty;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerIndex1Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerIndex2Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerIndex3Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerMiddle1Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerMiddle2Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerMiddle3Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerRing1Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerRing2Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerRing3Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerPinky1Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerPinky2Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerPinky3Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerThumb1Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerThumb2Property;
    
    private UnreliableProperty<UnityEngine.Quaternion> _fingerThumb3Property;
    
    #endregion
    
    public HandInfoModel() : base(null) {
        _isPointingProperty = new UnreliableProperty<bool>(1, _isPointing);
        _gripStrengthProperty = new UnreliableProperty<float>(2, _gripStrength);
        _rayLengthProperty = new UnreliableProperty<float>(3, _rayLength);
        _fingerIndex1Property = new UnreliableProperty<UnityEngine.Quaternion>(4, _fingerIndex1);
        _fingerIndex2Property = new UnreliableProperty<UnityEngine.Quaternion>(5, _fingerIndex2);
        _fingerIndex3Property = new UnreliableProperty<UnityEngine.Quaternion>(6, _fingerIndex3);
        _fingerMiddle1Property = new UnreliableProperty<UnityEngine.Quaternion>(7, _fingerMiddle1);
        _fingerMiddle2Property = new UnreliableProperty<UnityEngine.Quaternion>(8, _fingerMiddle2);
        _fingerMiddle3Property = new UnreliableProperty<UnityEngine.Quaternion>(9, _fingerMiddle3);
        _fingerRing1Property = new UnreliableProperty<UnityEngine.Quaternion>(10, _fingerRing1);
        _fingerRing2Property = new UnreliableProperty<UnityEngine.Quaternion>(11, _fingerRing2);
        _fingerRing3Property = new UnreliableProperty<UnityEngine.Quaternion>(12, _fingerRing3);
        _fingerPinky1Property = new UnreliableProperty<UnityEngine.Quaternion>(13, _fingerPinky1);
        _fingerPinky2Property = new UnreliableProperty<UnityEngine.Quaternion>(14, _fingerPinky2);
        _fingerPinky3Property = new UnreliableProperty<UnityEngine.Quaternion>(15, _fingerPinky3);
        _fingerThumb1Property = new UnreliableProperty<UnityEngine.Quaternion>(16, _fingerThumb1);
        _fingerThumb2Property = new UnreliableProperty<UnityEngine.Quaternion>(17, _fingerThumb2);
        _fingerThumb3Property = new UnreliableProperty<UnityEngine.Quaternion>(18, _fingerThumb3);
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isPointingProperty.WriteLength(context);
        length += _gripStrengthProperty.WriteLength(context);
        length += _rayLengthProperty.WriteLength(context);
        length += _fingerIndex1Property.WriteLength(context);
        length += _fingerIndex2Property.WriteLength(context);
        length += _fingerIndex3Property.WriteLength(context);
        length += _fingerMiddle1Property.WriteLength(context);
        length += _fingerMiddle2Property.WriteLength(context);
        length += _fingerMiddle3Property.WriteLength(context);
        length += _fingerRing1Property.WriteLength(context);
        length += _fingerRing2Property.WriteLength(context);
        length += _fingerRing3Property.WriteLength(context);
        length += _fingerPinky1Property.WriteLength(context);
        length += _fingerPinky2Property.WriteLength(context);
        length += _fingerPinky3Property.WriteLength(context);
        length += _fingerThumb1Property.WriteLength(context);
        length += _fingerThumb2Property.WriteLength(context);
        length += _fingerThumb3Property.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isPointingProperty.Write(stream, context);
        writes |= _gripStrengthProperty.Write(stream, context);
        writes |= _rayLengthProperty.Write(stream, context);
        writes |= _fingerIndex1Property.Write(stream, context);
        writes |= _fingerIndex2Property.Write(stream, context);
        writes |= _fingerIndex3Property.Write(stream, context);
        writes |= _fingerMiddle1Property.Write(stream, context);
        writes |= _fingerMiddle2Property.Write(stream, context);
        writes |= _fingerMiddle3Property.Write(stream, context);
        writes |= _fingerRing1Property.Write(stream, context);
        writes |= _fingerRing2Property.Write(stream, context);
        writes |= _fingerRing3Property.Write(stream, context);
        writes |= _fingerPinky1Property.Write(stream, context);
        writes |= _fingerPinky2Property.Write(stream, context);
        writes |= _fingerPinky3Property.Write(stream, context);
        writes |= _fingerThumb1Property.Write(stream, context);
        writes |= _fingerThumb2Property.Write(stream, context);
        writes |= _fingerThumb3Property.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsPointing: {
                    changed = _isPointingProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.GripStrength: {
                    changed = _gripStrengthProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.RayLength: {
                    changed = _rayLengthProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerIndex1: {
                    changed = _fingerIndex1Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerIndex2: {
                    changed = _fingerIndex2Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerIndex3: {
                    changed = _fingerIndex3Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerMiddle1: {
                    changed = _fingerMiddle1Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerMiddle2: {
                    changed = _fingerMiddle2Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerMiddle3: {
                    changed = _fingerMiddle3Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerRing1: {
                    changed = _fingerRing1Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerRing2: {
                    changed = _fingerRing2Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerRing3: {
                    changed = _fingerRing3Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerPinky1: {
                    changed = _fingerPinky1Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerPinky2: {
                    changed = _fingerPinky2Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerPinky3: {
                    changed = _fingerPinky3Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerThumb1: {
                    changed = _fingerThumb1Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerThumb2: {
                    changed = _fingerThumb2Property.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.FingerThumb3: {
                    changed = _fingerThumb3Property.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isPointing = isPointing;
        _gripStrength = gripStrength;
        _rayLength = rayLength;
        _fingerIndex1 = fingerIndex1;
        _fingerIndex2 = fingerIndex2;
        _fingerIndex3 = fingerIndex3;
        _fingerMiddle1 = fingerMiddle1;
        _fingerMiddle2 = fingerMiddle2;
        _fingerMiddle3 = fingerMiddle3;
        _fingerRing1 = fingerRing1;
        _fingerRing2 = fingerRing2;
        _fingerRing3 = fingerRing3;
        _fingerPinky1 = fingerPinky1;
        _fingerPinky2 = fingerPinky2;
        _fingerPinky3 = fingerPinky3;
        _fingerThumb1 = fingerThumb1;
        _fingerThumb2 = fingerThumb2;
        _fingerThumb3 = fingerThumb3;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
